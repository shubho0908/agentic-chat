generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String         @unique
  emailVerified   Boolean        @default(false)
  image           String?
  encryptedApiKey String?
  apiKeyUpdatedAt DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  accounts        Account[]
  sessions        Session[]
  conversations   Conversation[]

  @@map("user")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM

  @@map("message_role")
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED

  @@map("processing_status")
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  title     String?   @db.VarChar(255)
  isPublic  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId, createdAt(sort: Desc)])
  @@index([isPublic])
  @@map("conversation")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  
  parentMessageId String?      
  siblingIndex    Int          @default(0)
  isDeleted       Boolean      @default(false)
  deletedAt       DateTime?
  
  conversation Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  attachments  Attachment[]
  parent       Message?      @relation("MessageVersions", fields: [parentMessageId], references: [id], onDelete: Cascade)
  versions     Message[]     @relation("MessageVersions")

  @@unique([parentMessageId, siblingIndex])
  @@index([conversationId, isDeleted, createdAt])
  @@map("message")
}

model Attachment {
  id               String            @id @default(cuid())
  messageId        String
  fileUrl          String            @db.Text
  fileName         String            @db.VarChar(255)
  fileType         String            @db.VarChar(100)
  fileSize         Int
  createdAt        DateTime          @default(now())
  processingStatus ProcessingStatus  @default(PENDING)
  processedAt      DateTime?
  processingError  String?           @db.Text
  chunkCount       Int?
  totalTokens      Int?

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@map("attachment")
}
