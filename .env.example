# Encryption (REQUIRED for API key storage)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_KEY=your-64-character-hex-encryption-key-here

# Mem0 (REQUIRED - for persistent AI memory)
# Get your API key from: https://app.mem0.ai/dashboard/api-keys
# Mem0 provides intelligent memory management for AI conversations
MEM0_API_KEY=m0-xxx

# pgvector Configuration (REQUIRED - for semantic caching and RAG)
# Uses PostgreSQL with pgvector extension (same database as auth)
# Vectors are stored in PostgreSQL tables: document_chunk, semantic_cache
# NOTE: Memory storage is now handled by Mem0 cloud service (see MEM0_API_KEY above)
#
# DIMENSION HANDLING (PostgreSQL 8KB page limit):
# - <=2000 dims: Uses vector type (fp32, 4 bytes per dim) with HNSW indexes
# - 2001-4000 dims: Uses halfvec type (fp16, 2 bytes per dim) with HNSW indexes
# - >4000 dims: Not indexable - see PGVECTOR_UPGRADE.md for solutions
#
# VERSION REQUIREMENTS:
# - pgvector >= 0.5.0: Basic vector support (up to 2000 dimensions)
# - pgvector >= 0.7.0: Adds halfvec support (up to 4000 dimensions)
# - To check version: SELECT extversion FROM pg_extension WHERE extname = 'vector';
# - To upgrade: ALTER EXTENSION vector UPDATE TO '0.7.0'; (or latest)
#
# EMBEDDING MODEL OPTIONS:
# 1. text-embedding-3-large (3072 dims) - Best accuracy, requires pgvector 0.7.0+
#    EMBEDDING_MODEL=text-embedding-3-large
#    EMBEDDING_DIMENSIONS=3072
#
# 2. text-embedding-3-large (reduced) - Good accuracy, any pgvector version
#    EMBEDDING_MODEL=text-embedding-3-large
#    EMBEDDING_DIMENSIONS=1536
#    Note: Uses OpenAI's 'dimensions' parameter to reduce output from 3072 to 1536
#    with minimal accuracy loss (Matryoshka Representation Learning)
#
# 3. text-embedding-3-small (1536 dims) - Faster, smaller, any pgvector version
#    EMBEDDING_MODEL=text-embedding-3-small
#    EMBEDDING_DIMENSIONS=1536
#
# For cloud providers (Neon/Supabase/AWS):
# - Neon: Usually has pgvector 0.7.0+, check database dashboard
# - Supabase: May need to manually update in SQL editor
# - AWS RDS/Aurora: Check available extension versions
#
# For self-hosted: https://github.com/pgvector/pgvector#installation
EMBEDDING_MODEL=text-embedding-3-large
EMBEDDING_DIMENSIONS=3072
CACHE_TTL_SECONDS=3600 # Cache time-to-live in seconds (default: 3600 = 1 hour)

# Cohere Re-ranking (OPTIONAL - enhances RAG retrieval quality)
# Get your API key from: https://dashboard.cohere.com/api-keys
# When enabled, uses two-stage retrieval:
# 1. Vector search retrieves initial candidates (4x the final limit)
# 2. Cohere rerank model re-scores and reorders candidates
# 3. Returns top N most relevant results
# This significantly improves answer quality for RAG queries
# If not set, the system will fallback to standard vector search only
COHERE_API_KEY=your-cohere-api-key-here
RERANKER_MODEL=rerank-v3.5

# Database (PostgreSQL for authentication)
# For Neon: Use the pooled URL (with -pooler) for DATABASE_URL
# and the direct URL (without -pooler) for DIRECT_DATABASE_URL
DATABASE_URL=postgresql://user:password@host-pooler.region.aws.neon.tech:5432/dbname?sslmode=require
DIRECT_DATABASE_URL=postgresql://user:password@host.region.aws.neon.tech:5432/dbname?sslmode=require

# Authentication (Better Auth)
BETTER_AUTH_SECRET=your-secret-key-here # Generate with: openssl rand -base64 32
BETTER_AUTH_URL=http://localhost:3000
NEXT_PUBLIC_APP_URL=http://localhost:3000

# Google OAuth (Get from: https://console.cloud.google.com/apis/credentials)
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# UploadThing (for file uploads)
UPLOADTHING_TOKEN=your-uploadthing-token

# Tavily Web Search API (OPTIONAL - enables web search tool)
# Get your API key from: https://tavily.com/
# Allows AI to search the web for current information, news, and real-time data
# Free tier: 1000 searches/month
# If not set, web search tool will be disabled
TAVILY_API_KEY=your-tavily-api-key-here

# YouTube Data API v3 (OPTIONAL - enhances YouTube tool with metadata)
# Get your API key from: https://console.cloud.google.com/apis/credentials
# Provides video titles, channel names, durations, and descriptions for chapter extraction
# Free tier: 10,000 quota units/day (approximately 10,000 video metadata requests)
# If not set, YouTube tool will still work but with limited metadata
YOUTUBE_API_KEY=your-youtube-api-key-here